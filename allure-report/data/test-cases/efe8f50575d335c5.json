{"uid":"efe8f50575d335c5","name":"PASS: HOME button found","fullName":"Test_features_automation_allure#test_full_app_flow","historyId":"7b2e87aa236a983dd4efd88de8be246f","time":{"start":1757861023500,"stop":1757861119781,"duration":96281},"description":"Koko sovelluksen testausflow, jatkaa suoritusta virheistä huolimatta.","descriptionHtml":"<p>Koko sovelluksen testausflow, jatkaa suoritusta virheistä huolimatta.</p>\n","status":"failed","statusMessage":"Failed: Jotkin testit epäonnistuivat. Katso yllä oleva yhteenveto.","statusTrace":"driver = <appium.webdriver.webdriver.WebDriver (session=\"d06bfc86-9417-494f-805f-586f397a5fa8\")>\n\n    @allure.feature(\"Sääsovelluksen testit\")\n    @allure.story(\"Koko testisetti\")\n    def test_full_app_flow(driver):\n        \"\"\"Koko sovelluksen testausflow, jatkaa suoritusta virheistä huolimatta.\"\"\"\n        print(\"Starting full app flow test...\")\n        test_results = []  # Tallennetaan kaikkien testien tulokset\n    \n        with allure.step(\"Sovelluksen käynnistys ja alustus\"):\n            # Close app first to ensure initial view\n            print(\"Closing app...\")\n            driver.terminate_app(\"fi.sbweather.app\")\n            print(\"App closed. Reopening...\")\n            time.sleep(2)\n    \n            # Reopen the app\n            print(\"Opening app...\")\n            driver.activate_app(\"fi.sbweather.app\")\n            print(\"App opened. Waiting for main view...\")\n            time.sleep(5)\n    \n        # Test 1: Main view verification\n        print(\"Testing HOME button...\")\n        result1 = verify_element(driver, AppiumBy.ACCESSIBILITY_ID, \"KOTI\\nTab 1 of 3\",\n                              \"HOME button\", \"HOME_button_main\")\n        test_results.append((\"HOME button test\", result1))\n    \n        # Test 2: Search functionality\n        with allure.step(\"Haku-toiminnallisuus\"):\n            try:\n                print(\"Testing search functionality...\")\n                # Tap and input Oulu text to field\n                driver.tap([(400, 780)])\n                time.sleep(3)\n                driver.execute_script('mobile: shell', {\n                    'command': 'input',\n                    'args': ['text', 'Oulu'],\n                    'includeStderr': True,\n                    'timeout': 5000\n                })\n                save_screenshot(driver, \"Oulu_weather_stations_list\", timestamp, failed=False)\n                test_results.append((\"Oulu search\", True))\n                print(\"Search completed successfully\")\n            except Exception as e:\n                print(f\"Search failed: {e}\")\n                test_results.append((\"Oulu search\", False))\n    \n        # Test 3: Oulu Vihreäsaari\n        print(\"Testing Oulu Vihreäsaari...\")\n        result3 = tap_and_test_location(driver, \"Oulu Vihreäsaari\", \"Oulu Vihreäsaari\", \"Weather_oulu_vihreasaari\")\n        test_results.append((\"Oulu Vihreäsaari\", result3))\n    \n        # Test 4: Oulu lentoasema\n        print(\"Testing Oulu lentoasema...\")\n        result4 = tap_and_test_location(driver, \"Oulu lentoasema\", \"Oulu lentoasema\", \"Weather_oulu_airport\")\n        test_results.append((\"Oulu lentoasema\", result4))\n    \n        # Return to Main view\n        try:\n            print(\"Returning to main view...\")\n            driver.back()\n            time.sleep(3)\n            driver.back()\n            print(\"Used Android back button x2 to return to the Main view.\")\n            test_results.append((\"Return to main view\", True))\n        except Exception as e:\n            print(f\"Return to main failed: {e}\")\n            test_results.append((\"Return to main view\", False))\n    \n        # Test 5: Weather views\n        view_coords = [\n            (300, 1150),\n            (790, 1150),\n            (300, 1480),\n            (790, 1480)\n        ]\n        view_accessibility_ids = [\n            \"Lämpimimmät\",\n            \"Kylmimmät\",\n            \"Sateisimmat\",\n            \"Tuulisimmat\"\n        ]\n        view_names = [\n            \"Max_Temp\",\n            \"Low_Temp\",\n            \"Most_Rain\",\n            \"Most_Windy\"\n        ]\n    \n        for idx, coords in enumerate(view_coords):\n            with allure.step(f\"Testing {view_names[idx]} view\"):\n                try:\n                    print(f\"Testing {view_names[idx]} view...\")\n                    driver.tap([coords])\n                    time.sleep(6)\n    \n                    # Check if the view actually opened\n                    result = verify_element(driver, AppiumBy.ACCESSIBILITY_ID, view_accessibility_ids[idx],\n                                        f\"{view_accessibility_ids[idx]} element\", view_names[idx])\n                    test_results.append((f\"{view_names[idx]} view\", result))\n    \n                    # Return to Main view\n                    driver.back()\n                    print(f\"Returned to Main view from {view_names[idx]}.\")\n                    time.sleep(3)\n    \n                except Exception as e:\n                    print(f\"View test {view_names[idx]} failed: {e}\")\n                    test_results.append((f\"{view_names[idx]} view\", False))\n    \n        # Test 6: Records tab\n        with allure.step(\"Ennätykset-välilehti\"):\n            try:\n                print(\"Testing Records tab...\")\n                # Click RECORDS tab\n                records_tab = WebDriverWait(driver, 10).until(\n                    EC.element_to_be_clickable((AppiumBy.ACCESSIBILITY_ID, \"ENNÄTYKSET\\nTab 2 of 3\"))\n                )\n                records_tab.click()\n                print(\"RECORDS tab opened.\")\n                time.sleep(3)\n    \n                # Check if widget view (ImageView) is visible\n                result = verify_element(driver, AppiumBy.CLASS_NAME, \"android.widget.ImageView\",\n                                    \"Widget image (ImageView)\", \"Records_widget\")\n                test_results.append((\"Records tab\", result))\n    \n                time.sleep(3)\n            except TimeoutException:\n                print(\"RECORDS tab not found.\")\n                save_screenshot(driver, \"Records_tab_not_found\", timestamp, failed=True)\n                test_results.append((\"Records tab\", False))\n    \n        # Test 7: Final verification\n        print(\"Testing final HOME button...\")\n        result7 = verify_element(driver, AppiumBy.ACCESSIBILITY_ID, \"KOTI\\nTab 1 of 3\",\n                              \"HOME button\", \"HOME_button_final\")\n        test_results.append((\"Final HOME button\", result7))\n    \n        # Closing the app\n        try:\n            print(\"Closing app...\")\n            time.sleep(3)\n            driver.terminate_app(\"fi.sbweather.app\")\n            test_results.append((\"App termination\", True))\n            print(\"App closed successfully\")\n        except Exception as e:\n            print(f\"App termination failed: {e}\")\n            test_results.append((\"App termination\", False))\n    \n        # Tulostetaan yhteenveto\n        print(\"\\n\" + \"=\"*50)\n        print(\"TESTIYHTEENVETO:\")\n        print(\"=\"*50)\n    \n        all_passed = True\n        for test_name, result in test_results:\n            status = \"PASS\" if result else \"FAIL\"\n            print(f\"{test_name}: {status}\")\n            if not result:\n                all_passed = False\n    \n        print(\"=\"*50)\n        print(f\"LOPPUTULOS: {'KAIKKI TESTIT ONNISTUIVAT' if all_passed else 'JOITKIN TESTEISTÄ EPÄONNISTUI'}\")\n        print(\"=\"*50)\n    \n        # Failataan testi vain jos kaikki testit epäonnistuivat\n        # Tai voit valita failata jos tärkeät testit epäonnistuivat\n        if not all_passed:\n>           pytest.fail(\"Jotkin testit epäonnistuivat. Katso yllä oleva yhteenveto.\")\nE           Failed: Jotkin testit epäonnistuivat. Katso yllä oleva yhteenveto.\n\nTest_features_automation_allure.py:292: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1757861020759,"stop":1757861023499,"duration":2740},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"description":"Koko sovelluksen testausflow, jatkaa suoritusta virheistä huolimatta.","status":"failed","statusMessage":"Failed: Jotkin testit epäonnistuivat. Katso yllä oleva yhteenveto.","statusTrace":"driver = <appium.webdriver.webdriver.WebDriver (session=\"d06bfc86-9417-494f-805f-586f397a5fa8\")>\n\n    @allure.feature(\"Sääsovelluksen testit\")\n    @allure.story(\"Koko testisetti\")\n    def test_full_app_flow(driver):\n        \"\"\"Koko sovelluksen testausflow, jatkaa suoritusta virheistä huolimatta.\"\"\"\n        print(\"Starting full app flow test...\")\n        test_results = []  # Tallennetaan kaikkien testien tulokset\n    \n        with allure.step(\"Sovelluksen käynnistys ja alustus\"):\n            # Close app first to ensure initial view\n            print(\"Closing app...\")\n            driver.terminate_app(\"fi.sbweather.app\")\n            print(\"App closed. Reopening...\")\n            time.sleep(2)\n    \n            # Reopen the app\n            print(\"Opening app...\")\n            driver.activate_app(\"fi.sbweather.app\")\n            print(\"App opened. Waiting for main view...\")\n            time.sleep(5)\n    \n        # Test 1: Main view verification\n        print(\"Testing HOME button...\")\n        result1 = verify_element(driver, AppiumBy.ACCESSIBILITY_ID, \"KOTI\\nTab 1 of 3\",\n                              \"HOME button\", \"HOME_button_main\")\n        test_results.append((\"HOME button test\", result1))\n    \n        # Test 2: Search functionality\n        with allure.step(\"Haku-toiminnallisuus\"):\n            try:\n                print(\"Testing search functionality...\")\n                # Tap and input Oulu text to field\n                driver.tap([(400, 780)])\n                time.sleep(3)\n                driver.execute_script('mobile: shell', {\n                    'command': 'input',\n                    'args': ['text', 'Oulu'],\n                    'includeStderr': True,\n                    'timeout': 5000\n                })\n                save_screenshot(driver, \"Oulu_weather_stations_list\", timestamp, failed=False)\n                test_results.append((\"Oulu search\", True))\n                print(\"Search completed successfully\")\n            except Exception as e:\n                print(f\"Search failed: {e}\")\n                test_results.append((\"Oulu search\", False))\n    \n        # Test 3: Oulu Vihreäsaari\n        print(\"Testing Oulu Vihreäsaari...\")\n        result3 = tap_and_test_location(driver, \"Oulu Vihreäsaari\", \"Oulu Vihreäsaari\", \"Weather_oulu_vihreasaari\")\n        test_results.append((\"Oulu Vihreäsaari\", result3))\n    \n        # Test 4: Oulu lentoasema\n        print(\"Testing Oulu lentoasema...\")\n        result4 = tap_and_test_location(driver, \"Oulu lentoasema\", \"Oulu lentoasema\", \"Weather_oulu_airport\")\n        test_results.append((\"Oulu lentoasema\", result4))\n    \n        # Return to Main view\n        try:\n            print(\"Returning to main view...\")\n            driver.back()\n            time.sleep(3)\n            driver.back()\n            print(\"Used Android back button x2 to return to the Main view.\")\n            test_results.append((\"Return to main view\", True))\n        except Exception as e:\n            print(f\"Return to main failed: {e}\")\n            test_results.append((\"Return to main view\", False))\n    \n        # Test 5: Weather views\n        view_coords = [\n            (300, 1150),\n            (790, 1150),\n            (300, 1480),\n            (790, 1480)\n        ]\n        view_accessibility_ids = [\n            \"Lämpimimmät\",\n            \"Kylmimmät\",\n            \"Sateisimmat\",\n            \"Tuulisimmat\"\n        ]\n        view_names = [\n            \"Max_Temp\",\n            \"Low_Temp\",\n            \"Most_Rain\",\n            \"Most_Windy\"\n        ]\n    \n        for idx, coords in enumerate(view_coords):\n            with allure.step(f\"Testing {view_names[idx]} view\"):\n                try:\n                    print(f\"Testing {view_names[idx]} view...\")\n                    driver.tap([coords])\n                    time.sleep(6)\n    \n                    # Check if the view actually opened\n                    result = verify_element(driver, AppiumBy.ACCESSIBILITY_ID, view_accessibility_ids[idx],\n                                        f\"{view_accessibility_ids[idx]} element\", view_names[idx])\n                    test_results.append((f\"{view_names[idx]} view\", result))\n    \n                    # Return to Main view\n                    driver.back()\n                    print(f\"Returned to Main view from {view_names[idx]}.\")\n                    time.sleep(3)\n    \n                except Exception as e:\n                    print(f\"View test {view_names[idx]} failed: {e}\")\n                    test_results.append((f\"{view_names[idx]} view\", False))\n    \n        # Test 6: Records tab\n        with allure.step(\"Ennätykset-välilehti\"):\n            try:\n                print(\"Testing Records tab...\")\n                # Click RECORDS tab\n                records_tab = WebDriverWait(driver, 10).until(\n                    EC.element_to_be_clickable((AppiumBy.ACCESSIBILITY_ID, \"ENNÄTYKSET\\nTab 2 of 3\"))\n                )\n                records_tab.click()\n                print(\"RECORDS tab opened.\")\n                time.sleep(3)\n    \n                # Check if widget view (ImageView) is visible\n                result = verify_element(driver, AppiumBy.CLASS_NAME, \"android.widget.ImageView\",\n                                    \"Widget image (ImageView)\", \"Records_widget\")\n                test_results.append((\"Records tab\", result))\n    \n                time.sleep(3)\n            except TimeoutException:\n                print(\"RECORDS tab not found.\")\n                save_screenshot(driver, \"Records_tab_not_found\", timestamp, failed=True)\n                test_results.append((\"Records tab\", False))\n    \n        # Test 7: Final verification\n        print(\"Testing final HOME button...\")\n        result7 = verify_element(driver, AppiumBy.ACCESSIBILITY_ID, \"KOTI\\nTab 1 of 3\",\n                              \"HOME button\", \"HOME_button_final\")\n        test_results.append((\"Final HOME button\", result7))\n    \n        # Closing the app\n        try:\n            print(\"Closing app...\")\n            time.sleep(3)\n            driver.terminate_app(\"fi.sbweather.app\")\n            test_results.append((\"App termination\", True))\n            print(\"App closed successfully\")\n        except Exception as e:\n            print(f\"App termination failed: {e}\")\n            test_results.append((\"App termination\", False))\n    \n        # Tulostetaan yhteenveto\n        print(\"\\n\" + \"=\"*50)\n        print(\"TESTIYHTEENVETO:\")\n        print(\"=\"*50)\n    \n        all_passed = True\n        for test_name, result in test_results:\n            status = \"PASS\" if result else \"FAIL\"\n            print(f\"{test_name}: {status}\")\n            if not result:\n                all_passed = False\n    \n        print(\"=\"*50)\n        print(f\"LOPPUTULOS: {'KAIKKI TESTIT ONNISTUIVAT' if all_passed else 'JOITKIN TESTEISTÄ EPÄONNISTUI'}\")\n        print(\"=\"*50)\n    \n        # Failataan testi vain jos kaikki testit epäonnistuivat\n        # Tai voit valita failata jos tärkeät testit epäonnistuivat\n        if not all_passed:\n>           pytest.fail(\"Jotkin testit epäonnistuivat. Katso yllä oleva yhteenveto.\")\nE           Failed: Jotkin testit epäonnistuivat. Katso yllä oleva yhteenveto.\n\nTest_features_automation_allure.py:292: Failed","steps":[{"name":"Sovelluksen käynnistys ja alustus","time":{"start":1757861023501,"stop":1757861030950,"duration":7449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"Test element: HOME button","time":{"start":1757861030951,"stop":1757861031010,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"Haku-toiminnallisuus","time":{"start":1757861031010,"stop":1757861034602,"duration":3592},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"Test location: Oulu Vihreäsaari","time":{"start":1757861034603,"stop":1757861057391,"duration":22788},"status":"passed","steps":[],"attachments":[{"uid":"2cde7b34b7fbe1a4","name":"Weather_oulu_vihreasaari_fail_failed","source":"2cde7b34b7fbe1a4.png","type":"image/png","size":472766}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"Test location: Oulu lentoasema","time":{"start":1757861057394,"stop":1757861067733,"duration":10339},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"Testing Max_Temp view","time":{"start":1757861070992,"stop":1757861080614,"duration":9622},"status":"passed","steps":[{"name":"Test element: Lämpimimmät element","time":{"start":1757861077428,"stop":1757861077486,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"Testing Low_Temp view","time":{"start":1757861080614,"stop":1757861090233,"duration":9619},"status":"passed","steps":[{"name":"Test element: Kylmimmät element","time":{"start":1757861087060,"stop":1757861087121,"duration":61},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"Testing Most_Rain view","time":{"start":1757861090233,"stop":1757861099886,"duration":9653},"status":"passed","steps":[{"name":"Test element: Sateisimmat element","time":{"start":1757861096680,"stop":1757861096737,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"Testing Most_Windy view","time":{"start":1757861099886,"stop":1757861109521,"duration":9635},"status":"passed","steps":[{"name":"Test element: Tuulisimmat element","time":{"start":1757861106319,"stop":1757861106374,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"Ennätykset-välilehti","time":{"start":1757861109522,"stop":1757861116332,"duration":6810},"status":"passed","steps":[{"name":"Test element: Widget image (ImageView)","time":{"start":1757861113285,"stop":1757861113331,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"Test element: HOME button","time":{"start":1757861116333,"stop":1757861116394,"duration":61},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"stepsCount":16},"afterStages":[{"name":"driver::0","time":{"start":1757861119842,"stop":1757861120199,"duration":357},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"story","value":"Koko testisetti"},{"name":"feature","value":"Sääsovelluksen testit"},{"name":"suite","value":"Test_features_automation_allure"},{"name":"host","value":"DESKTOP-0K69VMV"},{"name":"thread","value":"11768-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Test_features_automation_allure"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"efe8f50575d335c5.json","parameterValues":[]}
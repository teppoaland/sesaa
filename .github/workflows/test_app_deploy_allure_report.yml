name: Test app and Deploy Allure Report with History

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - "**"

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test-and-generate-report:
    name: Run tests and generate Allure report
    runs-on: self-hosted
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Essential for Allure history

      - name: Use system Python
        run: python --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install --upgrade Appium-Python-Client
          pip install allure-pytest

      # 1. Create directory structure
      - name: Create Allure directories
        run: |
          mkdir -p ./allure-results/history
          echo "Created allure-results/history directory"
        shell: bash

      # 2. Download previous history artifact
      - name: Download previous allure history
        uses: actions/download-artifact@v4
        with:
          name: allure-history
          path: ./allure-results/history
        continue-on-error: true  # Prevents failure on first run

      # 3. Verify and initialize history if missing
      - name: Verify and initialize history
        run: |
          # Check if history files exist and are valid
          if [ ! -f "allure-results/history/history-trend.json" ]; then
            echo "Initializing history files..."
            echo '[{"buildOrder":1,"reportName":"Initial Run","reportUrl":"","data":{"failed":0,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":0}}]' > allure-results/history/history-trend.json
            echo '{}' > allure-results/history/history.json
          else
            # Update buildOrder for new run
            current_order=$(jq 'map(.buildOrder) | max' allure-results/history/history-trend.json)
            new_order=$((current_order + 1))
            jq --argjson new_build "$new_order" '
              . += [{
                buildOrder: $new_build,
                reportName: ("Run #" + ($new_build|tostring)),
                reportUrl: "",
                data: {failed:0, broken:0, skipped:0, passed:0, unknown:0, total:0}
              }]
            ' allure-results/history/history-trend.json > temp.json && mv temp.json allure-results/history/history-trend.json
            echo "Updated buildOrder to: $new_order"
          fi
        shell: bash

      # 4. Run tests with PowerShell
      - name: Run Appium tests with Allure reporting
        shell: pwsh
        run: pytest --alluredir=allure-results -v -s Test_features_automation_allure.py

      # 5. Generate Allure report
      - name: Generate Allure report
        run: |
          npm install -g allure-commandline
          allure generate allure-results --clean -o allure-report
        shell: bash

      # 6. Upload history for next run
      - name: Upload history artifact for next run
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: ./allure-report/history/
          retention-days: 30

      # 7. Upload report artifact
      - name: Upload Allure report artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

  deploy-to-github-pages:
    name: Deploy Allure report to GitHub Pages
    runs-on: ubuntu-latest
    needs: test-and-generate-report
    if: always()
    steps:
      - name: Download Allure report artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: ./allure-report

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./allure-report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
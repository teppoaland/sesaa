name: Test app and Deploy Allure Report with History

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - "**"

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test-and-generate-report:
    name: Run tests and generate Allure report
    runs-on: self-hosted
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use system Python
        run: python --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install --upgrade Appium-Python-Client
          pip install allure-pytest

      # Create directory structure first
      - name: Create Allure directories
        run: |
          mkdir -p ./allure-results/history
          echo "Created allure-results/history directory"
        shell: bash

      # Create initial history if no artifact exists
      - name: Create initial history if missing
        run: |
          if [ ! -f "allure-results/history/history-trend.json" ]; then
            echo '[{"buildOrder":1,"reportName":"Initial Run","reportUrl":"","data":{"failed":0,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":0}}]' > allure-results/history/history-trend.json
            echo '{}' > allure-results/history/history.json
            echo "Created initial history files"
          fi
        shell: bash

      # Try to download previous history (will fail gracefully on first run)
      - name: Download previous allure history
        uses: actions/download-artifact@v4
        with:
          name: allure-history
          path: ./allure-results/history
        continue-on-error: true

      # Run tests with Windows PowerShell instead of pwsh
      - name: Run Appium tests with Allure reporting
        shell: powershell
        run: pytest --alluredir=allure-results -v -s Test_features_automation_allure.py

      # Generate Allure report
      - name: Generate Allure report
        run: |
          npm install -g allure-commandline
          allure generate allure-results --clean -o allure-report
        shell: bash

      # Upload history for next run
      - name: Upload history artifact for next run
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: ./allure-report/history/
          retention-days: 30
          if-no-files-found: warn

      # Upload report artifact
      - name: Upload Allure report artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report
          if-no-files-found: warn

  deploy-to-github-pages:
    name: Deploy Allure report to GitHub Pages
    runs-on: ubuntu-latest
    needs: test-and-generate-report
    # Continue even if previous job failed
    if: always()  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download report with error handling
      - name: Download Allure report artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: ./allure-report
        continue-on-error: true

      # Setup GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # Upload to GitHub Pages
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./allure-report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
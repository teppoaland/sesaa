name: Test app and Deploy Allure Report with History

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - "**"

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test-and-generate-report:
    name: Run tests and generate Allure report
    runs-on: self-hosted
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use system Python
        run: python --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install --upgrade Appium-Python-Client
          pip install allure-pytest

      # 1. Create directory structure (Bash)
      - name: Create Allure directories
        run: |
          mkdir -p ./allure-results/history
          echo "Created allure-results/history directory"
        shell: bash

      # 2. Download previous history (GitHub Action)
      - name: Download previous allure history
        uses: actions/download-artifact@v4
        with:
          name: allure-history
          path: ./allure-results/history
        continue-on-error: true

      # 3. Create initial history if download failed (Bash)
      - name: Create initial history if missing
        run: |
          if [ ! -f "allure-results/history/history-trend.json" ]; then
            echo '[{"buildOrder":1,"reportName":"Initial Run","reportUrl":"","data":{"failed":0,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":0}}]' > allure-results/history/history-trend.json
            echo '{}' > allure-results/history/history.json
            echo "Created initial history files"
          else
            echo "History files exist, checking build order..."
            # Ensure we have a valid build order
            current_order=$(jq 'map(.buildOrder) | max' allure-results/history/history-trend.json 2>/dev/null || echo "1")
            if [ "$current_order" = "null" ]; then
              current_order=1
            fi
            echo "Current build order: $current_order"
          fi
        shell: bash

      # 4. Run tests (PowerShell)
      - name: Run Appium tests with Allure reporting
        shell: pwsh  
        run: pytest --alluredir=allure-results -v -s Test_features_automation_allure.py

      # 5. Update build order before generating report (Bash)
      - name: Update build order in history
        run: |
          # Install jq if not available
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            # For Windows with Chocolatey: choco install jq -y
            # For Ubuntu: sudo apt-get install -y jq
            # For self-hosted runner, you might need to pre-install jq
            echo "jq not available, skipping build order update"
            exit 0
          fi
          
          HISTORY_FILE="allure-results/history/history-trend.json"
          if [ -f "$HISTORY_FILE" ]; then
            # Get current max build order
            current_order=$(jq 'map(.buildOrder) | max' "$HISTORY_FILE")
            if [ "$current_order" = "null" ]; then
              current_order=0
            fi
            new_order=$((current_order + 1))
            
            echo "Updating build order from $current_order to $new_order"
            
            # Create updated history with new build order
            jq --argjson new_build "$new_order" '
              . += [{
                buildOrder: $new_build,
                reportName: ("Run #" + ($new_build|tostring)),
                reportUrl: ("https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"),
                data: {
                  failed: 0,
                  broken: 0,
                  skipped: 0,
                  passed: 0,
                  unknown: 0,
                  total: 0
                }
              }]
            ' "$HISTORY_FILE" > "${HISTORY_FILE}.tmp"
            
            mv "${HISTORY_FILE}.tmp" "$HISTORY_FILE"
            echo "Build order updated to $new_order"
          else
            echo "No history file found, skipping build order update"
          fi
        shell: bash

      # 6. Generate Allure report (Bash)
      - name: Generate Allure report
        run: |
          npm install -g allure-commandline
          allure generate allure-results --clean -o allure-report
        shell: bash

      # 7. Upload history for next run (GitHub Action)
      - name: Upload history artifact for next run
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: ./allure-results/history/
          retention-days: 30
          if-no-files-found: warn

      # 8. Upload report artifact (GitHub Action)
      - name: Upload Allure report artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report
          if-no-files-found: warn

  deploy-to-github-pages:
    name: Deploy Allure report to GitHub Pages
    runs-on: ubuntu-latest
    needs: test-and-generate-report
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure report artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: ./allure-report
        continue-on-error: true

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./allure-report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
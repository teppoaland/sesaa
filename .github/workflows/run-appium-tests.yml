name: Saa-app-testing

on:
  workflow_dispatch:
    inputs:
      save_all_screenshots:
        description: 'Save all screenshots (not just failed ones)'
        required: false
        default: false
        type: boolean

jobs:
  activation-test:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use system Python
        run: python --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install --upgrade Appium-Python-Client

      - name: Verify ADB connection
        shell: powershell
        run: |
          adb kill-server
          adb start-server
          Write-Host "Connected devices:"
          adb devices
          $deviceCount = (adb devices | Select-Object -Skip 1 | Where-Object { $_ -match "device$" } | Measure-Object).Count
          if ($deviceCount -eq 0) {
            Write-Error "No devices connected"
            exit 1
          }

      - name: Start Appium server and run tests
        shell: powershell
        run: |
          # Check if port 4723 is free, if not, try to free it
          try {
            $tcpConnection = Get-NetTCPConnection -LocalPort 4723 -ErrorAction SilentlyContinue
            if ($tcpConnection -and $tcpConnection.OwningProcess) {
              Write-Host "Port 4723 is in use by process $($tcpConnection.OwningProcess). Trying to free it..."
              Stop-Process -Id $tcpConnection.OwningProcess -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 2
            }
          } catch {
            Write-Host "Could not free port 4723, but continuing..."
          }

          # Start Appium server in the background
          Write-Host "Starting Appium server..."
          Start-Process -NoNewWindow -FilePath "node" -ArgumentList "$(npm root -g)/appium/build/lib/main.js", "-p", "4723", "--allow-insecure=adb_shell"

          # Wait for Appium to start
          $timeout = 30
          $counter = 0
          $appiumReady = $false
          while ($counter -lt $timeout) {
            try {
              $response = Invoke-WebRequest -Uri "http://127.0.0.1:4723/status" -UseBasicParsing -TimeoutSec 2
              if ($response.StatusCode -eq 200) {
                Write-Host "Appium server is ready!"
                $appiumReady = $true
                break
              }
            } catch {
              Write-Host "Waiting for Appium to start... ($counter/$timeout)"
              Start-Sleep -Seconds 2
              $counter += 2
            }
          }

          if (-not $appiumReady) {
            Write-Error "Appium failed to start within timeout period"
            exit 1
          }

          # Determine test parameters
          $screenshotParam = ""
          if ("${{ github.event.inputs.save_all_screenshots }}" -eq "true") {
            $screenshotParam = "all"
          }

          # Run the Python tests
          Write-Host "Running all Python tests..."
          python -u Test_features_automation.py $screenshotParam
          $testExitCode = $LASTEXITCODE

          # Stop Appium server (optional)
          Write-Host "Stopping Appium server..."
          try {
            Get-NetTCPConnection -LocalPort 4723 -ErrorAction SilentlyContinue | ForEach-Object {
              Stop-Process -Id $_.OwningProcess -Force -ErrorAction SilentlyContinue
            }
          } catch {
            Write-Host "Could not stop Appium server: $($_.Exception.Message)"
          }

          exit $testExitCode